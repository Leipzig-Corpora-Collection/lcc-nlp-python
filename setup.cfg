[bdist_wheel]
universal = 1

[metadata]
name = lcc-nlp
version = 1.0.0
author = Erik Körner
author_email = "Erik Körner" <koerner@saw-leipzig.de>
description = "LCC NLP Tools"
long_description = file: README.md
long_description_content_type = text/markdown
license = LGPL-3.0
keywords =
    LCC
    NLP
    Tokenizer
    Segmenter
    Cleaner
    Language Identification
classifier =
    Development Status :: 5 - Production/Stable
    Intended Audience :: Developers
    Intended Audience :: Information Technology
    Intended Audience :: Science/Research
    License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)
    Operating System :: OS Independent
    Programming Language :: Python :: 3 :: Only
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: 3.11
    Programming Language :: Python :: 3.12
    Programming Language :: Python :: 3.13
    Topic :: File Formats
    Topic :: Software Development :: Libraries
    Topic :: Text Processing
    Topic :: Text Processing :: Filters
    Topic :: Text Processing :: Linguistic
    Topic :: Utilities
url = https://github.com/Leipzig-Corpora-Collection/lcc-nlp-python/
project_urls =
    Source = https://github.com/Leipzig-Corpora-Collection/lcc-nlp-python/
;    Documentation = https://lcc-nlp.readthedocs.io/
    Issue Tracker = https://github.com/Leipzig-Corpora-Collection/lcc-nlp-python/issues


[options]
zip_safe = False
include_package_data = True
package_dir =
    =src
packages = find_namespace:
python_requires = >=3.9
install_requires =
    regex

[options.packages.find]
where = src

[options.package_data]
lcc =
    py.typed

[options.entry_points]
console_scripts =
    lcc-nlp = lcc.cli:cli_main

[options.extras_require]
warc =
    warcio >=1.7.4
integrations =
    spacy >=3.7.2
tqdm =
    tqdm >=4.66.1
test =
    pytest >=7.2.1
    pytest-clarity >=1.0.1
    pytest-cov >=4.0.0
    pytest-mock >=3.11.1
    pytest-randomly >=3.12.0
    tox
style =
    black >=23.9.1
    check-manifest >=0.49
    flake8 >=6.1.0
    isort >=5.12.0
    mypy >=1.5.1
    darglint >=1.8.1
    types-regex
    types-tqdm
    ;lxml-stubs
;docs =
;    sphinx >=5.3.0
;    sphinx-rtd-theme >=0.5.1
;    myst-parser >=0.18.1
;    ;mkdocs
build =
    build >=1.0.3
    twine >=4.0.2

; ### TOOLS #################################################################

; ### TOOLS > FLAKE8 ########################################################

[flake8]
max-line-length = 140
exclude =
    venv
    build
    dist
    docs
    resources
    htmlcov
    .tox
    .mypy_cache
    .pytest_cache
    .ruff_cache

docstring-convention = google
extend-ignore =
    E203
    ; for now in development to see important ones
    DAR
    E501
per-file-ignores =
    setup.py:D
    tests/*:S,D,RST,F401,F841,E501
    __main__.py:E,F
    src/lcc/tokenizer.py:S105

; ### TOOLS > (FLAKE8) > DARGLINT ###########################################

[darglint]
docstring_style = google

; ### TOOLS > MYPY ##########################################################

[mypy]
exclude = (?x)(
    ^venv/
    | ^.tox/
    | ^.[^_]+_cache/
    | ^docs/
    | ^tests/
    | ^dist/
    | ^build/
    | ^setup.py$
  )
; ignore warcio typing, no stub files
[mypy-warcio]
ignore_missing_imports = True
[mypy-warcio.recordbuilder]
ignore_missing_imports = True
[mypy-warcio.recordloader]
ignore_missing_imports = True

; ### TOOLS > ISORT #########################################################

[tool:isort]
profile = black
line_length = 120
force_single_line = True
known_first_party = lcc
default_section = THIRDPARTY
forced_separate = test_lcc
extend_skip =
    venv
    dist
    build
    docs
    resources
    htmlcov
    .tox
    .mypy_cache
    .pytest_cache
    .ruff_cache
skip_gitignore = True

; ### TOOLS > PYTEST ########################################################

[tool:pytest]
;log_cli = True
;log_cli_level = DEBUG
addopts =
    -ra
    -vv
    --strict-markers
    --doctest-modules
    --doctest-glob=\*.rst
    --tb=short
    --cov
    ;--cov-report=term-missing
python_files =
    test_*.py
    *_test.py
    tests.py
testpaths =
    tests

; ### TOOLS > PYTEST > COVERAGE #############################################

[coverage:paths]
source =
   src
   */site-packages

[coverage:run]
branch = true
source =
    lcc
    ; TODO might need to disable "tests" later, should be 100%
    tests
parallel = true

[coverage:report]
;show_missing = true
precision = 2
exclude_also =
    ; Don't complain about abstract methods, they aren't run:
    @(abc\.)?abstractmethod
    ; Skip any pass lines such as may be used for @abstractmethod
    pass

    ; Don't complain if non-runnable code isn't run:
    if __name__ == .__main__.:

    ; This should never even be possible in the first place
    raise RuntimeError\(

; ### TOOLS > PACKAGING #####################################################

[check-manifest]
ignore =
    .vscode/launch.json
    .vscode/settings.json

; ### DOCUMENTATION > SPHINX ################################################

[build_sphinx]
source_dir = docs
build_dir = dist/docs
